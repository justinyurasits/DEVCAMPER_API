Lesson 30 - Mongoose Middleware & Slugify

Installed slugify package
Required slugify in /models/Bootcamp.js
Created a slug with BootcampSchema.pre('save', function (next) {
  this.slug = slugify(this.name, { lower: true });
  next();
});


Lesson 29 - Async/Await Middleware

Add new file /middleware/async.js
Add asyncHandler to async.js
Require asyncHandler in /controllers/bootcamps.js
Delete all try/catch blocks in /controllers/bootcamps.js
Wrap async statements in `asyncHandler`



Lesson 28 - Mongoose Error Handling 2 

Add additional conditional error handlers to /middleware/error.js to check for duplicate and validation errors. 


Lesson 27 - Mongoose Error Handling 1

Move specific error handling to error handlier and remove from controllers catch statements
In /middleware/error.js, do the following:
  Create handling for error name `CastError`
  Make copy of error with `let error = {...err}'
  Add `error = new ErrorResponse(message, 404);`
  Bring in Error Response with `const ErrorResponse = require("../utils/errorResponse");`

In /controllers/bootcamps:
  Restore catch(err) next statements to next(err)
  Add `return next(
        new ErrorResponse(`Bootcamp not found with id of ${req.params.id}`, 404)
      );` to Delete, Get, Update bootcamp controllers `if(!bootcamp)` statement. 


Lesson 26 - Custom ErrorResponse Class

Create utils directory and /utils/errorResponse.js
Create a ErrorResponse class and export it
In /middleware/error.js, update the res.status to use err.statusCode || 500
Bring in ErrorResponse into /controllers/bootcamps.js
Update next(err) in getBootcamp with `next(new ErrorResponse(`Bootcamp not found with id of ${req.params.id}`, 404));`


Lesson 25 - Error Handling Middleware

Add Express native error handling methods with async functions
Add next(err) to export.getBootcamp in /controllers/bootcamps.js
Run test by sending malformed bootcamp ID, validate that next(err) returns html
Change next(err) behaivor by creating custom JSON handler in new file /middleware/error.js
Add `const errorHandler = require('./middleware/error')` to server.js
Add `app.use(errorHandler)` to server.js AFTER routers are mounted 



Lesson 24 - Update and Delete Bootcamps with PUT and DELETE

Add try/catch blocks and error conditions to update and delete actions of bootcamp in /controllers/bootcamps.js


Lesson 23 - Fetch Bootcamps - GET

Add try/catch block for response to GET to exports.getBootcamps in /controllers/bootcamps.js
Add try/catch block for response to GET to exports.getBootcamp in /controllers/bootcamps.js
Add error handling to exports.getBootcamp for correclty formated bootcamp name that does not exist


Lesson 22 - Create Bootcamp

Start with basic CRUD functionality 
Bring Bootcamp model into /controllers/bootcamps.js with `const Bootcamp = require('../models/Bootcamp')`
Set `console.log(req.body)` in controllers/bootcamps.js exports.createBootcamp to examine incoming reqeusts 
Create a header preset type in Postman `Key:Content-Type, Value: application/json`
Send inbound request with sample bootcamp data from /_data/bootcamps.json.  Doesn't work. 
Add body parser to server.js with `app.use(express.json())`
Comment out `console` and `res.staus` from `exports.createBootcamp`
Turn `exports.createBootcamp` into async call to bootcamps and return 201 status on success
Added four bootcamps to database using Postman Create Bootcamp and data from /_data/bootcamps.json


Lesson 21 - Create First Data Model

Import _data folder with sample data structures from project resources folder
Create models directory and Bootcamp.js file in the directory
Require mongoose, set new schema in Bootcamp.js
Add schema elements, name, slug (url-friendly name), website, phone, address, location, careers
Export the module with `module.exports` in Bootcamp.js


Lesson 20 - Colors In The console

npm install Colors
Require colors in server.js
On `const server = app.listen` in server.js, add .yellow.bold to the  'Server running' console message. 
On `process.on('unhandledRejection'` in server.js, add .red
On `console.log` in db.js, add .cyan.underline.bold

Lesson 19 - Install Mongoose

Mongoose.js docs  - Read them
Install Mongoose into local project with 'npm install mongoose'
Add db.js to config folder, require Mongoose, set async function to connect to db
MongoDB.com > connect to your application -> Copy the connection string
Add connection string to config.env, make it an environment variable
Update 'connectDB' in db.js, call MONGO_URI, add statements to elminate errors
Log connection to console in db.js
Export db.js with `module.exports`
Required connectDB in server.js
Call connection to DB with `connectDB()` in server.js
Moved app.listen into const=server in server.js
Set up handler for unhandled promise rejections in server.js 

Lesson 18 - Install MongoDB

MongoDB ONLY.  No code changes. 
Established a MongoDB account
Set an initial free-tier cluster on AWS
Cluster name is 'Cluster0'
Username is yurasits, password is Chrome generated
Set up network access to be limited to my at-home local IP address
Set up connect using MongoDB Compass.  Installed Compass locally.
Connected local MongoDB compass app to the cloud based version of Mongo. 

Lesson 17 - Postman ONLY - No code in this lesson

Lesson 16 - Middleware

Set up middelware `const logger` in server.js.  Added a variable hello to the req object
Used `app.use(logger)` to instruct app to use the middleware in server.js
Added 'hello' data to exports.getBootcamps in /controllers/bootcamps.js to illustrate passing data from middleware (deleted)
Added a second logger to log to console the req method, protocol, host and URL
Created /middleware and logger.js file to move logging into that file and directory
Exported the logger.js file with module.exports = logger in the logger.js file
Added the logger to server.js with const logger = require('./middleware/logger');
Installed morgan node logger



Lesson 15 - Creating Controller Methods

Set up controllers directory
Created bootcamps.js in controllers directory
Moved routes & responses rom /routes/bootcamps.js to  /controllers/bootcamps.js
Added `const { getBootcamp,getBootcamps,createBootcamp,updateBootcamp,deleteBootcamp,} = require('../controllers/bootcamps');` to import controllers to /routes/bootcamps.js
Set up routes to the controllers with router.route statements in /routes/bootcamps.js


Lesson 14 - Setup Express Router

Use Express router.  Set up router directory and bootcamps.js in that directory
Moved all routes from server.js to bootcamps.js
Initialized Express and the router in bootcamps.js
Added route files to server.js with `const bootcamps`
Mounted router to the urls with app.use() in server.js
Updated and shorted URL's in bootcamps.js per route definition in server.js
Exported router in bootcamps.js with module.exports = router; 

Lesson 13 - Creating Routes and Responses

Added a first route to '/'
Worked with a number of responses
Set up routes for GET, POST, PUT, DELETE